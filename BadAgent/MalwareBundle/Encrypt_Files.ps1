# Encrypt-Files.ps1

# This script encrypts and decrypts files in a target directory using AES encryption.

param (
    [string]$targetDirectory = "C:\Users\Temp\Desktop\TargetFile",
    [switch]$decrypt
)

# Check if the target directory exists
if (-not (Test-Path $targetDirectory -PathType Container)) {
    Write-Host "Target directory does not exist. Exiting..."
    Exit
}

# Generate a random password
function Generate-RandomPassword {
    $length = 16
    $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*"
    $password = -join (Get-Random -InputObject $chars -Count $length)
    return $password
}

# Function to encrypt a file
function Encrypt-File {
    param (
        [string]$filePath,
        [string]$password
    )

    # Generate a random initialization vector (IV)
    $iv = New-Object Byte[] 16
    (Get-Random -InputObject 1 -Count 16) | % { $iv[$_] = $_ }

    # Read the file content
    $fileContent = Get-Content -Path $filePath -Raw

    # Display the original content
    Write-Host "Original content of $($file.FullName):"
    Write-Host $fileContent

    # Convert the password to a byte array with a valid key size
    $keyBytes = [System.Text.Encoding]::UTF8.GetBytes($password.PadRight(32, '0').Substring(0, 32))

    # Encrypt the file content using AES encryption
    $aes = New-Object System.Security.Cryptography.AesManaged
    $aes.Key = $keyBytes
    $aes.IV = $iv
    $encryptor = $aes.CreateEncryptor()

    $encryptedContent = $encryptor.TransformFinalBlock([System.Text.Encoding]::UTF8.GetBytes($fileContent), 0, $fileContent.Length)

    # Display the encrypted content
    Write-Host "Encrypted content of $($file.FullName):"
    Write-Host $encryptedContent

    # Save the encrypted content back to the file
    [System.IO.File]::WriteAllBytes($filePath, $encryptedContent)
}


# Function to decrypt a file
function Decrypt-File {
    param (
        [string]$filePath,
        [string]$password
    )

    # Read the encrypted content from the file
    $encryptedContent = [System.IO.File]::ReadAllBytes($filePath)

    # Convert the password to a byte array with a valid key size
    $keyBytes = [System.Text.Encoding]::UTF8.GetBytes($password.PadRight(32, '0').Substring(0, 32))

    # Decrypt the content using AES decryption
    $aes = New-Object System.Security.Cryptography.AesManaged
    $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aes.Key = $keyBytes
    $aes.IV = $encryptedContent[0..15]
    $decryptor = $aes.CreateDecryptor()

    $decryptedContent = $decryptor.TransformFinalBlock($encryptedContent, 16, $encryptedContent.Length - 16)

    # Convert the decrypted content to plain text
    $decryptedText = [System.Text.Encoding]::UTF8.GetString($decryptedContent).TrimEnd("`0")

    # Display the original content
    Write-Host "Original content of $($filePath):"
    Write-Host $decryptedText

    # Save the decrypted content back to the file
    [System.IO.File]::WriteAllBytes($filePath, $decryptedContent)
}






# Set the password
$password = Generate-RandomPassword

if ($decrypt) {
    # Decrypt files in the target directory
    $encryptedFiles = Get-ChildItem $targetDirectory -File
    foreach ($file in $encryptedFiles) {
        Decrypt-File -filePath $file.FullName -password $password
        Write-Host "File $($file.FullName) decrypted successfully."
    }
} else {
    # Encrypt files in the target directory
    $files = Get-ChildItem $targetDirectory -File
    foreach ($file in $files) {
        Encrypt-File -filePath $file.FullName -password $password
        Write-Host "File $($file.FullName) encrypted successfully."
    }
}

Write-Host "Process completed."

# Logging starts here
# Get VM unique identifier, current time, and script name
$vmID = (Get-WmiObject -Class Win32_ComputerSystem).Name
$currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$scriptName = $MyInvocation.MyCommand.Name

# Define the path for the log file
$logPath = "C:\Users\User1\Desktop\logs\logFile.log"

# Format the log entry
$logEntry = "VM ID: $vmID, Time: $currentTime, Script: $scriptName"

# Write log entry to the log file
Add-Content -Path $logPath -Value $logEntry


Write-Host "Log file saved."